{"ast":null,"code":"var _jsxFileName = \"/Users/avinash/Downloads/ticket_booking_unstop-main/src/Components/Booking.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\n\n// Component that manages booking of the seats.\n// It also manages how to find nearby seats.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Booking = _ref => {\n  _s();\n  let {\n    status,\n    setStatus,\n    reset\n  } = _ref;\n  // calculate current available seats\n  // it will help to set upper limit on number of\n  // seats user can select currently.\n  let available = 0;\n  for (let i = 0; i < 80; i++) if (status[i] === false) available++;\n\n  // seats state will basically store user input - number of seats user wants to book.\n  const [seats, setSeats] = useState(1);\n  // to show the output (seat numbers booked) to the user.\n  const [notification, setNotification] = useState({\n    status: false,\n    seats: ''\n  });\n\n  // will handle input change.\n  const handleChange = e => {\n    setSeats(e.target.value);\n  };\n\n  // will change the state of the best seats possible for the user to booked from available.\n  const bookTickets = start => {\n    let booked = 0; // number of seats booked\n    let seatNumbers = []; // seat numbers which are booked.\n    while (booked < seats) {\n      // if seat is available, book it and store the in in seatNumbers.\n      if (!status[start]) {\n        seatNumbers.push(start);\n        booked++; // number of booked seats will increase.\n      }\n\n      start++;\n\n      // once booked seats equals to the input we will break this loop.\n    }\n\n    // making API call, using fetch api, to store the details in the backend.\n    fetch(\"https://ticket-booking-api-txa9.onrender.com/book\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(seatNumbers)\n    });\n    setStatus(seatNumbers);\n\n    // will return seatNumbers.\n    return seatNumbers;\n  };\n\n  // To find nearby seats, when we can't find all seats in one row.\n  const findNearbySeats = () => {\n    // finding the array containing all current available seats.\n    let availableSeats = [];\n    for (let i = 0; i < 80; i++) if (status[i] === false) availableSeats.push(i);\n\n    // finding N seats in which maximum difference is minimum.\n    // It will take O(N) time.\n    let n = availableSeats.length,\n      mini = 81,\n      end = seats - 1,\n      strt = 0;\n    for (let i = 0; i <= n - seats; i++) {\n      if (availableSeats[end] - availableSeats[i] < mini) {\n        mini = availableSeats[end] - availableSeats[i];\n        strt = i;\n      }\n      end++;\n    }\n\n    // Booking tickets starting from strt index.\n    return bookTickets(availableSeats[strt]);\n  };\n\n  // to handle 'Book' click.\n  const handleClick = e => {\n    // traversing row wise, in the coach.\n    let base = 0,\n      strt,\n      f = false;\n    let ans;\n    for (let i = 1; i <= 12; i++) {\n      let flag = false;\n      let empty = 0;\n      for (let j = 1; j < 8; j++) {\n        // will count total number of seats available in current row.\n        if (status[base + j - 1] === false && !flag) {\n          strt = base + j;\n          empty++;\n          flag = true;\n        } else if (status[base + j - 1] === false) empty++;\n      }\n\n      // if empty seats in current row is greater than equal to input then will allocate\n      // seats from that row to user.\n      if (empty >= seats) {\n        ans = bookTickets(strt - 1);\n        f = true;\n        break;\n      }\n\n      // increasing base to access next row.\n      base = base + 7;\n    }\n\n    // if couldn't find seats in one row, will find nearby seats.\n    if (!f) ans = findNearbySeats();\n\n    // Generating String of Seat numbers to show to the user.\n    ans = ans.map(i => i + 1);\n    setNotification(prev => {\n      prev.status = true;\n      prev.seats = ans.join(', ');\n      return {\n        ...prev\n      };\n    });\n\n    // after 5 seconds we will remove the output.\n    setTimeout(() => setNotification({\n      status: false,\n      seats: ''\n    }), 5000);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [available > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(InputBox, {\n        type: \"number\",\n        value: seats,\n        onChange: handleChange,\n        min: 1,\n        max: Math.min(available, 7)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(BookButton, {\n        disabled: seats > Math.min(available, 7) || notification.status,\n        onClick: handleClick,\n        children: \"Book\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ResetButton, {\n        disabled: available === 80,\n        onClick: () => reset(),\n        children: \" Reset \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true), notification.status && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: [\"You have successfully booked \", seats, \" ticket(s)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: [\"Here are you seat number(s): \", notification.seats]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true), available > 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Please Select Number of Seats You want to Book! \\uD83D\\uDE42\\uD83C\\uDFAB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 16\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this), available > 0 && available < 7 && seats > available && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: [\"You can't book \", seats, \" ticket(s) for now\\u2639\\uFE0F.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 39\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this), available > 0 && available >= 7 && seats > 7 && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: [\"You can only book up to \", 7, \" tickets at a time.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 39\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this), !available && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: \"red\",\n          fontSize: \"1.5em\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Tickets SOLD OUT \\uD83D\\uDE13\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 62\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          opacity: \"0.6\",\n          width: \"auto\"\n        },\n        children: \"Please try again some time later!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ResetButton, {\n        disabled: available === 80,\n        onClick: () => reset(),\n        children: \" Reset \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n\n// Styling the container of the component.\n// fixing width, bringing content to center, etc.\n_s(Booking, \"P8Z1QEpHkXpwffk3NofZ3n5PG7k=\");\n_c = Booking;\nconst Container = styled.div`\n    width: 100%;\n    text-align: center;\n    padding-top: 3em;\n    padding-bottom: 1em;\n    margin-top: 0em;\n`;\n\n// Styling the button for Booking the seats.\n_c2 = Container;\nconst BookButton = styled.button`\n    padding: .5em 1em;\n    font-weight: bold;\n    border-radius: 5px;\n    background-color: blue;\n    color: white;\n    border: none;\n    cursor: pointer;\n    margin-left: 1em;\n    \n    // when hovering.\n    &:hover{\n        background-color: rgba(0, 0, 255, .8);\n    }\n\n    // When disabled - when seats more than current limit are selected.\n    &:disabled{\n        opacity: .4;\n        cursor: not-allowed;\n    }\n`;\n\n// Styling the Reset Button.\n_c3 = BookButton;\nconst ResetButton = styled.button`\n    padding: .5em 1em;\n    font-weight: bold;\n    border-radius: 5px;\n    background-color: red;\n    color: white;\n    border: none;\n    cursor: pointer;\n    margin-left: 1em;\n\n    // When Hovering\n    &:hover{\n        background-color: rgba(255, 0, 0, .8);\n    }\n\n    // When Disabled - when it is already reseted.\n    &:disabled{\n        opacity: .4;\n        cursor: not-allowed;\n    }\n`;\n\n// Styling the input box. \n_c4 = ResetButton;\nconst InputBox = styled.input`\n    text-align: center;\n    font-weight: bold;\n    outline: none;\n    display: inline-block;\n    width: 10%;\n    margin-inline: auto;\n    padding: .5em .75em;\n`;\n_c5 = InputBox;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Booking\");\n$RefreshReg$(_c2, \"Container\");\n$RefreshReg$(_c3, \"BookButton\");\n$RefreshReg$(_c4, \"ResetButton\");\n$RefreshReg$(_c5, \"InputBox\");","map":{"version":3,"names":["React","useState","styled","Booking","status","setStatus","reset","available","i","seats","setSeats","notification","setNotification","handleChange","e","target","value","bookTickets","start","booked","seatNumbers","push","fetch","method","headers","body","JSON","stringify","findNearbySeats","availableSeats","n","length","mini","end","strt","handleClick","base","f","ans","flag","empty","j","map","prev","join","setTimeout","Math","min","color","fontSize","opacity","width","Container","div","BookButton","button","ResetButton","InputBox","input"],"sources":["/Users/avinash/Downloads/ticket_booking_unstop-main/src/Components/Booking.js"],"sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\n\n// Component that manages booking of the seats.\n// It also manages how to find nearby seats.\nexport const Booking = ({status, setStatus, reset}) => {\n  // calculate current available seats\n  // it will help to set upper limit on number of\n  // seats user can select currently.\n  let available = 0;\n  for(let i=0; i<80; i++)\n    if(status[i]===false) available++;\n\n  // seats state will basically store user input - number of seats user wants to book.\n  const [seats, setSeats] = useState(1);\n  // to show the output (seat numbers booked) to the user.\n  const [notification, setNotification] = useState({status: false, seats: ''});\n\n  // will handle input change.\n  const handleChange = (e) => {\n    setSeats(e.target.value);\n  }\n\n  // will change the state of the best seats possible for the user to booked from available.\n  const bookTickets = (start) => {\n    let booked = 0;         // number of seats booked\n    let seatNumbers = [];   // seat numbers which are booked.\n    while(booked < seats){\n        // if seat is available, book it and store the in in seatNumbers.\n        if(!status[start]){\n            seatNumbers.push(start);\n            booked++;   // number of booked seats will increase.\n        }\n        start++;\n\n        // once booked seats equals to the input we will break this loop.\n    }\n\n    // making API call, using fetch api, to store the details in the backend.\n    fetch(\"https://ticket-booking-api-txa9.onrender.com/book\", {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(seatNumbers)\n    });\n\n    setStatus(seatNumbers);\n\n    // will return seatNumbers.\n    return seatNumbers;\n  }\n\n  // To find nearby seats, when we can't find all seats in one row.\n  const findNearbySeats = () => {\n    // finding the array containing all current available seats.\n    let availableSeats = [];\n    for(let i=0; i<80; i++)\n        if(status[i]===false) availableSeats.push(i);\n    \n    // finding N seats in which maximum difference is minimum.\n    // It will take O(N) time.\n    let n = availableSeats.length, mini = 81, end = seats-1, strt = 0;\n    for(let i=0; i<=n-seats; i++){\n        if(availableSeats[end] - availableSeats[i] < mini){\n            mini = availableSeats[end] - availableSeats[i];\n            strt = i;\n        }\n\n        end++;\n    }\n\n    // Booking tickets starting from strt index.\n    return bookTickets(availableSeats[strt]);\n  }\n\n  // to handle 'Book' click.\n  const handleClick = (e) => {\n      // traversing row wise, in the coach.\n      let base = 0, strt, f = false;\n      let ans;\n      for(let i=1; i<=12; i++){\n          let flag = false;\n          let empty = 0;\n          for(let j=1; j<8; j++){\n            // will count total number of seats available in current row.\n            if(status[base + j - 1]===false && !flag){\n                strt = base + j;\n                empty++;\n                flag = true;\n            } else if(status[base + j - 1]===false) empty++;\n\n          }\n          \n          // if empty seats in current row is greater than equal to input then will allocate\n          // seats from that row to user.\n          if(empty >= seats){\n            ans = bookTickets(strt-1);\n            f = true;\n            break;\n          }\n\n          // increasing base to access next row.\n          base = base + 7;\n      }\n\n      // if couldn't find seats in one row, will find nearby seats.\n      if(!f) ans = findNearbySeats();\n\n      // Generating String of Seat numbers to show to the user.\n      ans = ans.map(i => i+1);\n      setNotification(prev => {\n        prev.status = true;\n        prev.seats = ans.join(', ');\n        return {...prev}\n      });\n\n      // after 5 seconds we will remove the output.\n      setTimeout(() => setNotification({status: false, seats: ''}), 5000);\n  }\n\n  return (\n    <Container>\n        {/* If available seats are more than 0 then only show the input field. */}\n        { (available > 0) && \n            <>\n                {/* Input box to take number of seats as input from the user. */}\n                <InputBox type={\"number\"} value={seats} onChange={handleChange} min={1} max={Math.min(available, 7)}/>\n                {/* Button to book seats. */}\n                <BookButton disabled={seats > Math.min(available, 7) || notification.status} onClick={handleClick}>Book</BookButton>\n                {/* Button to reset the whole coach */}\n                <ResetButton disabled={available===80} onClick={() => reset()}> Reset </ResetButton>\n            </>\n        }\n\n        {/* if notification state is set then will show seat numbers booked for the user. */}\n        {\n            notification.status &&\n            <>\n                <p><b>You have successfully booked {seats} ticket(s)</b></p>\n                <p><b>Here are you seat number(s): {notification.seats}</b></p>\n            </>\n        }\n\n        {/* Just showing friendly message to the user. */}\n        { \n            (available > 0) && \n            <p><b>Please Select Number of Seats You want to Book! 🙂🎫</b></p> \n        } \n\n        {/* Handling invalid inputs */}\n        { \n            (available > 0  && available < 7 && seats>available) && \n            <p style={{color: \"red\"}}><b>You can't book {seats} ticket(s) for now☹️.</b></p>\n        }\n\n        {/* Showing the limit to the user. */}\n        { \n            (available > 0  && available >=7 && seats>7) && \n            <p style={{color: \"red\"}}><b>You can only book up to {7} tickets at a time.</b></p>\n        }\n\n        {/* When no tickets are available */}\n        {\n            !available && \n            <>\n                <p style={{color: \"red\", fontSize: \"1.5em\"}}><b>Tickets SOLD OUT 😓</b></p>\n                <p style={{opacity: \"0.6\", width: \"auto\"}}>Please try again some time later!</p>\n                <ResetButton disabled={available===80} onClick={() => reset()}> Reset </ResetButton>\n            </>\n        }\n    </Container>\n  )\n}\n\n// Styling the container of the component.\n// fixing width, bringing content to center, etc.\nconst Container = styled.div`\n    width: 100%;\n    text-align: center;\n    padding-top: 3em;\n    padding-bottom: 1em;\n    margin-top: 0em;\n`;\n\n// Styling the button for Booking the seats.\nconst BookButton = styled.button`\n    padding: .5em 1em;\n    font-weight: bold;\n    border-radius: 5px;\n    background-color: blue;\n    color: white;\n    border: none;\n    cursor: pointer;\n    margin-left: 1em;\n    \n    // when hovering.\n    &:hover{\n        background-color: rgba(0, 0, 255, .8);\n    }\n\n    // When disabled - when seats more than current limit are selected.\n    &:disabled{\n        opacity: .4;\n        cursor: not-allowed;\n    }\n`;\n\n// Styling the Reset Button.\nconst ResetButton = styled.button`\n    padding: .5em 1em;\n    font-weight: bold;\n    border-radius: 5px;\n    background-color: red;\n    color: white;\n    border: none;\n    cursor: pointer;\n    margin-left: 1em;\n\n    // When Hovering\n    &:hover{\n        background-color: rgba(255, 0, 0, .8);\n    }\n\n    // When Disabled - when it is already reseted.\n    &:disabled{\n        opacity: .4;\n        cursor: not-allowed;\n    }\n`;\n\n// Styling the input box. \nconst InputBox = styled.input`\n    text-align: center;\n    font-weight: bold;\n    outline: none;\n    display: inline-block;\n    width: 10%;\n    margin-inline: auto;\n    padding: .5em .75em;\n`;\n\n\n"],"mappings":"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AAA,QAEC;AAEhB,CAAC;;AAED;AACA;AAAA,GA3KaH,OAAO;AAAA,KAAPA,OAAO;AA4KpB,MAAMiD,SAAS,GAAGlD,MAAM,CAACmD,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AAAA,MARMD,SAAS;AASf,MAAME,UAAU,GAAGpD,MAAM,CAACqD,MAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AAAA,MAtBMD,UAAU;AAuBhB,MAAME,WAAW,GAAGtD,MAAM,CAACqD,MAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AAAA,MAtBMC,WAAW;AAuBjB,MAAMC,QAAQ,GAAGvD,MAAM,CAACwD,KAAM;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAC,MARID,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}